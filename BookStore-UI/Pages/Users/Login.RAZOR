@page "/login"
@using UI.Contracts
@using UI.Models

@inject IAuthenticationRepository AuthRepo
@inject NavigationManager NavManager

<div class="card">
    <h3 class="card-title">Log In</h3>

    @if (!_response)
    {
        <div class="alert alert-danger">
            <p>Login Failed</p>
        </div>
    }

    <div class="card-body">
        <EditForm Model="_userLoginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText Id="email" class="form-control" @bind-Value="_userLoginModel.EmailAddress"/>
                <ValidationMessage For="@(() => _userLoginModel.EmailAddress)"/>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="_userLoginModel.Password"/>
                <ValidationMessage For="@(() => _userLoginModel.Password)"/>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Log In</button>
        </EditForm>
    </div>
</div>

@code {
    private readonly UserLoginModel _userLoginModel = new();
    private bool _response = true;

    private async Task HandleLogin()
    {
        _response = await AuthRepo.LogIn(_userLoginModel);

        if (_response)
            NavManager.NavigateTo("/");
    }

}